/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.motorph.payroll.ui;

import com.motorph.payroll.attendance.AttendanceManager;
import com.motorph.payroll.models.Employee;
import com.motorph.payroll.data.EmployeeRepository;

import java.util.Date;
import java.util.List;
import javax.swing.SpinnerDateModel;
import javax.swing.JSpinner;
import javax.swing.table.DefaultTableModel;
import javax.swing.JSpinner.DateEditor;
import javax.swing.JOptionPane;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Map;
import com.motorph.payroll.util.LogWriter;





/**
 *
 * @author samleonor
 */
public class ProcessPayrollFrame extends javax.swing.JFrame {

    private List<Employee> employeeList;
    private AttendanceManager attendanceManager;
    private Employee user; 
    private DashboardFrame dashboardFrame;

    public ProcessPayrollFrame(List<Employee> employeeList, AttendanceManager attendanceManager, Employee user, DashboardFrame dashboardFrame) {
        this.employeeList = employeeList;
        this.attendanceManager = attendanceManager;
        this.user = user;
        this.dashboardFrame = dashboardFrame;

        initComponents();
        setSize(800, 600);

        startDatePicker.setModel(new javax.swing.SpinnerDateModel());
        endDatePicker.setModel(new javax.swing.SpinnerDateModel());

        startDatePicker.setEditor(new javax.swing.JSpinner.DateEditor(startDatePicker, "MM/dd/yyyy"));
        endDatePicker.setEditor(new javax.swing.JSpinner.DateEditor(endDatePicker, "MM/dd/yyyy"));
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        processButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        payrollTable = new javax.swing.JTable();
        startDatePicker = new javax.swing.JSpinner();
        endDatePicker = new javax.swing.JSpinner();
        panel1 = new java.awt.Panel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Start Date:");

        jLabel3.setText("End Date:");

        processButton.setText("Process Payroll");
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });

        payrollTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Employee ID", "Name", "Total Hours", "Gross Pay", "Deductions", "Net Pay"
            }
        ));
        jScrollPane2.setViewportView(payrollTable);

        panel1.setBackground(new java.awt.Color(0, 51, 153));

        jLabel1.setFont(new java.awt.Font("Charter", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Process Payroll");

        jButton1.setText("X");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(286, 286, 286)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 788, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(308, 308, 308)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(startDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(processButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(18, 18, 18)
                            .addComponent(endDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(startDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(endDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(processButton)
                .addGap(36, 36, 36)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed
        String attendancePath = "/Users/samleonor/Desktop/com.motorph.payroll/Attendance.csv";
        Date startDate = (Date) startDatePicker.getValue();
        Date endDate = (Date) endDatePicker.getValue();

        if (user != null) {
            LogWriter.log("ðŸ’¼ Payroll processed for " + employeeList.size() +
                " employee(s) by: " + user.getFirstName() + " " + user.getLastName());
        } else {
            LogWriter.log("ðŸ’¼ Payroll processed for " + employeeList.size() + " employee(s) by: Unknown User");
        }

        DefaultTableModel model = new DefaultTableModel(
            new String[]{"Employee ID", "Name", "Total Hours", "Gross Pay", "Deductions", "Net Pay"}, 0
        );

        try (BufferedReader reader = new BufferedReader(new FileReader(attendancePath))) {
            String line;
            Map<String, Double> hoursWorkedMap = new HashMap<>();

            while ((line = reader.readLine()) != null) {
                if (line.toLowerCase().contains("date") || line.toLowerCase().contains("time in")) {
                    continue;
                }

                String[] tokens = line.replaceAll("\"", "").split(",");
                if (tokens.length < 4) continue;

                String empId = tokens[0].trim();
                String dateStr = tokens[1].trim();
                String timeIn = tokens[2].trim();
                String timeOut = tokens[3].trim();

                try {
                    DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
                    Date logDate = dateFormat.parse(dateStr);

                    if (logDate.before(startDate) || logDate.after(endDate)) continue;

                    DateFormat timeFormat = new SimpleDateFormat("HH:mm");
                    Date in = timeFormat.parse(timeIn);
                    Date out = timeFormat.parse(timeOut);

                    double diffInHours = (out.getTime() - in.getTime()) / (1000.0 * 60 * 60);
                    hoursWorkedMap.put(empId, hoursWorkedMap.getOrDefault(empId, 0.0) + diffInHours);

                } catch (Exception e) {
                    System.err.println("â›” Skipping row due to parse error: " + line);
                    e.printStackTrace();
                }
            }

            for (Employee emp : employeeList) {
                String empId = emp.getEmployeeId();
                double totalHours = hoursWorkedMap.getOrDefault(empId, 0.0);
                double hourlyRate = emp.getSalary() / 160.0;
                double grossPay = totalHours * hourlyRate;
                double deduction = emp.getDeductions();
                double netPay = Math.max(0, grossPay - deduction);

                model.addRow(new Object[]{
                    empId,
                    emp.getFirstName() + " " + emp.getLastName(),
                    String.format("%.2f", totalHours),
                    String.format("â‚±%,.2f", grossPay),
                    String.format("â‚±%,.2f", deduction),
                    String.format("â‚±%,.2f", netPay)
                });
            }

            payrollTable.setModel(model);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading attendance: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_processButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose(); // Close the current frame
        if (dashboardFrame != null) {
            dashboardFrame.setVisible(true); // Go back to Dashboard
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public static void main(String[] args) {
        java.awt.EventQueue.invokeLater(() -> {
            List<Employee> employees = EmployeeRepository.loadAll();
            AttendanceManager attendanceManager = new AttendanceManager();
            Employee dummyUser = employees.isEmpty() ? null : employees.get(0);

            // âœ… Pass null for the dashboardFrame in test mode
            new ProcessPayrollFrame(employees, attendanceManager, dummyUser, null).setVisible(true);
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner endDatePicker;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private java.awt.Panel panel1;
    private javax.swing.JTable payrollTable;
    private javax.swing.JButton processButton;
    private javax.swing.JSpinner startDatePicker;
    // End of variables declaration//GEN-END:variables
}
